场景一、
现在又一个电子杂志系统,定期向用户的电子邮件信箱发送电子邮杂志。用户可以通过网页订阅电子杂志，也可以通过网页结束订阅。当客户端开始顶阅时，
系统发送一个邮件标识欢迎，当客户端结束订阅时，系统发送一个电子邮件标识欢送

及 本模块实现功能就是 发送 “欢迎” 和 “欢送” 邮件的模块。

在此模块中 各个产品类均有一个共同的接口，这并不代表建造着模式的特点。建造着模式可以应用到具有完全不同接口的产品类上。
大多数情况下是不知道最终构建出来的产品是什么样子的。 所以在标准的建造者模式里面，一般是不需要对产品定义接口的，因为最终构造的产品千差万别，
给这些产品定义公共接口几乎是没有意义的。

构造者模式分成两个很重要的部分：

1. 一个部分是 Builder 接口，这里定义如何构建各个部件，也就是知道每个部件功能如何实现，以及如何装配这些部件到产品中去
2. 另外一个部分是Director,Director 是知道如何组合来构建产品的，也就是说Director负责整体的构建算法，而且通常是分步骤地来执行。

不管怎么变化，建造模式都存在这么两个部分，一个部分是部件构造和产品装配，另一个是整体构建的算法。认识这点很重要，在建造模式中，强调的是固定整体构建的算法，而灵活扩展和切换部件的具体构造和产品装配方式。

换言之，构造者模式的重心在于分离构建算法和具体的构造实现，从而使得构建算法可以重用。具体的构造实现可以很方便地扩展和切换，从而可以灵活地组合来构造出不同的产品对象。


在什么情况下使用建造者模式:
	1.需要生成的产品对象有复杂的内部结构,每一个内部成分本身可以是对象，也可以仅仅是一个对象(即产品对象) 的一个组成部分。
	2.需要生成的产品对象的属性相互依赖。建造者模式可以强制实行一种分步骤进行的建造过程,因此如果过产品对象的一个属性必须在另一个属性被赋值之后才可以被赋值,使用建造者模式是一个很好的思想。
	3. 在对象创建过程中会使用到系统中的其他一些对象，这些对象在产品对象的创建过程中不易得到。







