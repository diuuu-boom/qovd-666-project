  	用电器做列子，笔记本电脑的插头一般都是三相的，即除了正极、阳极，还有一个地极。而有些地方的电源插座只两极，没有地极。
  电源插座与笔记本电脑电源插头不匹配使得笔记本电脑无法使用。这时候一个三相到两相的转化器（适配器）就能解决问题，而这正是
  适配器模式所做的事情。
  
  1). 类的适配器模式:
  		* 目标（Target）角色：这就是所期待得到的接口。注意：由于这里讨论的类适配器模式，因此目标不可以是类。
  		* 源（Adaptee）角色：现在需要适配器的接口。
  		* 适配器（Adapter）角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是具体类。
  2). 对象的适配器模式:
  		与类的适配器模式一样，对象的适配器把被适配的类API 转移成目标类的API，与类的适配器模式不同的是，对象的适配器模式不是使用继承
  		关系连接到 Adaptee 类，而是使用委派关系连接到 Adaptee 类。
  		Adaptee 类并没有sampleOperation2() 方法，而客户端期待这个方法。为使客户端能够使用 Adaptee 类，需要提供一个包装（Wrapper）
  		类 Adapter。这个包装类包装了一个Adaptee 的实例，从此包装类能够把 Adaptee 的 API 与 Target 类的 API 衔接起来。Adapter 与
  		Adaptee 是委派关系，这决定了适配器模式是对象的。
  		
  类的适配器 和 对象的适配器
  	* 类的适配器 使用对象继承的方式，是静态的定义方式; 而对象适配器 使用对象组合的方式，是动态的方式。
  		
  	* 对于类适配器，由于适配器直接继承了 Adaptee，使得适配器不能和 Adaptee 的子类一起工作，因为继承是静态的关系，当适配器继承了 Adaptee 后
  	     就不可能再去处理 Adaptee 的子类了。
  	     对于对象适配器，一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目标接口。因为对象适配器采用的
  	     是对象组合关系，只要对象类型正确，是不是子类都无所谓。
  	     
  	* 对于类适配器，适配器可以重定义 Adaptee 的部分行为，相当于类覆盖父亲的部分实现方法。
  	     对于对象适配器，要重定义 Adaptee 的行为比较困难，这种情况下，需要定义 Adaptee 的子类来实现重定义，然后让适配器组合子类。虽然重定义 Adaptee
  	     的行为比较困难，但是想要增加一些新的行为则很方便，而且新增加的行为可同时适用于所有的源。
  	     
  		（  建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式。）
  		
  适配器模式的优点
  * 更好的复用性
  	系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式可以让这些功能得到更好的复用。
  * 更好的扩展性
  	在实现适配器供能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。
  	
  适配器模式的缺点
  	过多的使用适配器，会让系统非常凌乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统电如果太多出现这种情况，维护升级比较麻烦
  	如果可以不适用适配器，尽量不要使用适配器模式，而是直接对系统进行重构。
  	     
  	     
  	     
  	     
  	        